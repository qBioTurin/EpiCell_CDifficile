library(devtools)
# install_github("https://github.com/qBioTurin/epimod", ref="variabilityFBA", force = T)
library(epimod)
# downloadContainers(tag = "2.0.0")
library(dplyr)
library(ggplot2)
library(patchwork)
library(RColorBrewer)
setwd("~/Documents/ClostridiumDiff_FBAandPN/EpiCell_CDifficile")
Tempi = seq(0, 72, 24)
metric = "median"
multi_param = T
tag = "Unified"
Condition = "Therapy"
Exper = "Model_Sensitivity"
param_target = c("IECsDeath", "Death4Treat", "Detox")
setwd(paste("./Results/CDiff", tag, Condition, Exper, sep = "_"))
net_name = "EpitCellDifficileHemeSink"
numb = 30
load("./EpitCellDifficileHemeSink-analysis.RData")
id_param = c()
for (p in 1:length(param_target)) {
for(i in 1:length(config)) {
if(param_target[p] == config[[i]][[1]][[1]]) {
id_param[p] = i
}
}
}
list.Fl = list.files(pattern = "\\.flux$")
subflux = lapply(sample(list.Fl, numb), function(i){
TracesPath = i
n = as.numeric(gsub(pattern = paste("(", net_name, "-analysis-)|(-0.flux)", sep = ""),
replacement = "", x = i))
flux = read.table(TracesPath, header = F)
ReactionsNames = flux[1, -c(1, 2)]
ReactionsNames = gsub("\\(", replacement = "_", ReactionsNames)
ReactionsNames = gsub("\\)", replacement = "", ReactionsNames)
flux = read.table(TracesPath, header = T)
colnames(flux) = c("Time", "Obj_0", ReactionsNames)
subflux = flux[, c("Time", ReactionsNames)] %>%
dplyr::filter(Time %in% Tempi) %>%
tidyr::gather(key = "Reaction", value = "Flux", -Time)
obj = flux[, c("Time", "Obj_0")]
subbounds = dplyr::filter(subflux, grepl("_Ub|_Lb", Reaction))
obj_bounds = dplyr::filter(subbounds, grepl("biomass205", Reaction))
subflux = dplyr::filter(subflux, !grepl("_Ub|_Lb", Reaction))
subflux = cbind(subflux, config = rep(as.character(i), length(subflux$Time)))
for (p in 1:length(param_target)) {
subflux = cbind(subflux, p = rep(config[[id_param[p]]][[n]][[3]], length(subflux$Time)))
}
return(subflux)
})
subflux = do.call(rbind, subflux)
if(multi_param) {
names(subflux) = c("Time", "reaction", "activity", "config", param_target)
}
subflux$config = stringr::str_remove(subflux$config, "EpitCellDifficileHemeSink-analysis-")
subflux$config = stringr::str_remove(subflux$config, "-0.flux")
subflux$measure = 0
subflux$tr = 0
setwd("~/Documents/ClostridiumDiff_FBAandPN/EpiCell_CDifficile")
setwd(paste("./Results/CDiff", tag, Condition, Exper, "sensitivity", sep = "_"))
load("./ranking_EpitCellDifficileHemeSink-sensitivity.RData")
rank$id = stringr::str_remove(rank$id, "EpitCellDifficileHemeSink-analysis-")
rank$id = stringr::str_remove(rank$id, ".trace")
rank$tr = 0
rank = rank[which(rank$id %in% unique(subflux$config)), ]
if(metric == "median") {
median = median(rank$measure)
} else {
mean = mean(rank$measure)
}
names(rank)[2] = "config"
subflux = merge(subflux, rank[, c(1, 2, 3)], by = "config")
subflux = subflux[, c(1:7, 10, 11)]
if(metric == "median") {
subflux = mutate(subflux,
tr.y = case_when(measure.y < median ~ "Blue",
measure.y >= median~ "Gold"))
} else {
subflux = mutate(subflux, tr.y = case_when(measure.y < mean ~ "Blue",
measure.y >= mean ~ "Gold"))
}
load("~/Documents/ClostridiumDiff_FBAandPN/EpiCell_CDifficile/Input/CDmodels/CD196HemeSink/CD196HemeSinkDiet.RData")
subflux$r.name = rep(model.mat@react_name, each = length(Tempi))
setwd("~/Documents/ClostridiumDiff_FBAandPN/EpiCell_CDifficile")
setwd("./Input/React2Path")
subreact = split(as.vector(model.mat@react_id),
ceiling(seq_along(as.vector(model.mat@react_id))/100))
for (i in 1:length(subreact)) {
fileConn <- file(paste("out_", i, ".txt", sep = ""))
writeLines(as.vector(subreact[[i]]), fileConn)
close(fileConn)
}
# https://www.metanetx.org/cgi-bin/mnxweb/id-mapper
# 1) Map your identifiers to and from MNXref
# 2) download tsv
ls.tsv = list.files(pattern = "\\.tsv$")
bigg2kegg = data.frame(query = 0, target = 0)
for (l in ls.tsv) {
id.mapper = readr::read_tsv(file = paste('./', l, sep = ""))
names(id.mapper) = c("query", "mnx_id", "reference", "xrefs", "name")
for (i in 1:length(id.mapper$xrefs)) {
start = unlist(gregexpr("kegg.reaction", id.mapper$xrefs[i]))[1]
if(start == -1 | is.na(start)) {target = ""}
else {
target = substr(id.mapper$xrefs[i], (start + 14), stop = (start + 19))
}
query = id.mapper$query[i]
output = c(query, target)
bigg2kegg = rbind(bigg2kegg, output)
}
}
bigg2kegg = bigg2kegg[-1, ]
bigg2kegg = bigg2kegg[!duplicated(bigg2kegg[-1, ][, "query"]), ]
subflux$rxn = rep(bigg2kegg$target, each = length(Tempi))
subflux$rxn = paste("rn:", subflux$rxn, sep = "")
subflux$rxn[which(subflux$rxn == "rn:")] = NA
################################################################################
rxn2enz <- KEGGREST::keggLink("enzyme", "reaction")
rxn2enz <- data.frame(rxn=names(rxn2enz), enz=rxn2enz)
enz2cdc <- KEGGREST::keggLink("cdc", "enzyme")
enz2cdc <- data.frame(enz = names(enz2cdc), cdc = enz2cdc)
path2cdc <- KEGGREST::keggLink("cdc", "pathway")
path2cdc <- data.frame(path = names(path2cdc), cdc = path2cdc)
# subflux$enz = 0
#
# enz = rxn2enz$enz[which(unique(subflux$rxn) %in% rxn2enz$rxn)]
# rxn = rxn2enz$rxn[which(unique(subflux$rxn) %in% rxn2enz$rxn)]
#
# df.enz = data.frame(enz, rxn)
#
# for (i in 1:nrow(subflux)) {
#   flag = subflux$rxn[i] %in% df.enz$rxn
#   if (flag == T) {
#     subflux$enz[i] = df.enz[rxn == subflux$rxn[i], "enz"]
#   } else {subflux$enz[i] = "ec:"}
# }
# subflux$gene = 0
#
# cdc = enz2cdc$cdc[which(unique(subflux$enz) %in% enz2cdc$enz)]
# enz = enz2cdc$enz[which(unique(subflux$enz) %in% enz2cdc$enz)]
#
# df.cdc = data.frame(cdc, enz)
#
# for (i in 1:nrow(subflux)) {
#   flag = subflux$enz[i] %in% df.cdc$enz
#   if (flag == T) {
#     subflux$gene[i] = df.cdc[enz == subflux$enz[i], "cdc"]
#   } else {subflux$gene[i] = "cdc:"}
# }
# subflux$pathway = 0
#
# pathway = path2cdc$path[which(unique(subflux$gene) %in% path2cdc$cdc)]
# gene = path2cdc$cdc[which(unique(subflux$gene) %in% path2cdc$cdc)]
#
# df.path = data.frame(pathway, gene)
#
# for (i in 1:nrow(subflux)) {
#   flag = subflux$gene[i] %in% df.path$gene
#   if (flag == T) {
#     subflux$gene[i] = df.path[gene == subflux$gene[i], "cdc"]
#   } else {subflux$pathway[i] = "path:"}
# }
################################################################################
rxn2enz2cdc = merge(x = rxn2enz, y = enz2cdc, by = "enz", all.x = T)
df.path = merge(x = rxn2enz2cdc, y = path2cdc, by = "cdc", all.x = T)
df.all = merge(x = rxn2enz2cdc, y = subflux[, c(3, 11)], by = "rxn", all = T)
df.sub = unique(df.all[order(df.all$reaction), ])
# queries = split(as.vector(unique(subflux$rxn)[-1]),
#                 ceiling(seq_along(as.vector(unique(subflux$rxn)[-1]))/10))
queries = split(as.vector(enz2cdc$cdc), ceiling(seq_along(enz2cdc$cdc)/10))
out = list()
for (e in 1:length(queries)) {
print(e)
res = KEGGREST::keggGet(queries[[e]])
vec.name = c(); vec.entry = c(); vec.path = c()
for(r in 1:length(res)) {
vec.name = append(vec.name, res[[r]][["NAME"]])
vec.entry = append(vec.entry, res[[r]][["ENTRY"]])
if(is.null(res[[r]][["PATHWAY"]][1])) {
vec.path = append(vec.path, NA)
} else {
vec.path = append(vec.path, res[[r]][["PATHWAY"]][1])
}
}
out[[e]] = data.frame(name = vec.name, entry = vec.entry, pathway = vec.path)
}
M = rbind(as.data.frame(do.call(rbind, out[1:length(out)-1])),
as.data.frame(do.call(rbind, out[length(out)])))
names(M) = c("name", "cdc", "pathway")
df.sub = left_join(df.sub, subflux, by = "reaction")
df.sub$cdc = stringr::str_remove(df.sub$cdc, "cdc:")
final.df.sub = merge(x = M, y = df.sub, by = "cdc", all.x = T)
names(final.df.sub) = c("gene.id", "GeneBank.name", "path.id",
"ReactionKegg.id", "EnzymeKegg.id", "ReactionModel.id",
"Config.id", "Time", "ReactionActivity", "IECsDeath",
"Death4Treat", "Detox", "ConfigRanking", "QualitativeRanking",
"ReactionModel.id", "rxn.y")
final.df.sub = final.df.sub[, -1]
saveRDS(final.df.sub, paste("subflux_", metric, ".rds", sep = ""))
subflux_median <- readRDS("~/Documents/ClostridiumDiff_FBAandPN/EpiCell_CDifficile/Input/React2Path/subflux_median.rds")
